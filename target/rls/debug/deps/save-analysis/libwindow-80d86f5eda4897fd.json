{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48],"program":"/home/brad/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","window","/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=80d86f5eda4897fd","-C","extra-filename=-80d86f5eda4897fd","--out-dir","/home/brad/Development/rusty_snek_gaem/target/rls/debug/deps","-L","dependency=/home/brad/Development/rusty_snek_gaem/target/rls/debug/deps","--extern","input=/home/brad/Development/rusty_snek_gaem/target/rls/debug/deps/libinput-dd49f844dc06c445.rmeta","--extern","shader_version=/home/brad/Development/rusty_snek_gaem/target/rls/debug/deps/libshader_version-2b6b0f279dec6027.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/brad/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,98,114,97,100,47,68,101,118,101,108,111,112,109,101,110,116,47,114,117,115,116,121,95,115,110,101,107,95,103,97,101,109,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,119,105,110,100,111,119,45,56,48,100,56,54,102,53,101,100,97,52,56,57,55,102,100,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"window","disambiguator":[13130682236261490436,16032526573682251854]},"crate_root":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src","external_crates":[{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13207157035321610514,1601512537482633728]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7623312343418098386,5842227285171027081]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15062483144693841030,3160817630090790886]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[436745421963593417,1808485874600938246]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14785001670989826495,12996925471203689162]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9965434524793337566,8042345761937100773]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[15482981957725683232,16126164733460801089]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[12401856028840807657,14789254441426287527]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[13858858106744831426,15797026455235720829]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[7931781289263694084,224457116430056702]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":11,"id":{"name":"shader_version","disambiguator":[2839840952492157745,2111395775949167285]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":12,"id":{"name":"input","disambiguator":[16964772504663392041,15144797332901361560]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":13,"id":{"name":"bitflags","disambiguator":[2663595552475436125,15801114882369740192]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":14,"id":{"name":"serde_derive","disambiguator":[13250950303118959916,6157865687236098681]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":15,"id":{"name":"serde","disambiguator":[1182243628716789087,15247412391709071494]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":16,"id":{"name":"viewport","disambiguator":[14355481214919939198,15298215661488219807]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","num":17,"id":{"name":"float","disambiguator":[9481931967605590180,5009724469139080130]}}],"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":23008,"line_start":1,"line_end":713,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1261,"byte_end":1269,"line_start":33,"line_end":33,"column_start":20,"column_end":28},"alias_span":null,"name":"NoWindow","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":23008,"line_start":1,"line_end":713,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/pistoncore-window-0.32.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":90},{"krate":0,"index":260},{"krate":0,"index":278},{"krate":0,"index":276},{"krate":0,"index":272},{"krate":0,"index":266},{"krate":0,"index":262},{"krate":0,"index":92},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":282},{"krate":0,"index":300},{"krate":0,"index":298},{"krate":0,"index":294},{"krate":0,"index":288},{"krate":0,"index":284},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":146},{"krate":0,"index":176},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":184}],"decl_id":null,"docs":" Window storage and interfacing traits.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"deny(missing_copy_implementations)","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23,"byte_end":61,"line_start":2,"line_end":2,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23691,"byte_end":23699,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"NoWindow","qualname":"::no_window::NoWindow","value":"NoWindow {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" A window without user interface, often used in server event loops.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23844,"byte_end":23847,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<NoWindow>::new","value":"fn (settings: &WindowSettings) -> NoWindow","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `NoWindow`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1472,"byte_end":1483,"line_start":42,"line_end":42,"column_start":10,"column_end":21},"name":"ProcAddress","qualname":"::ProcAddress","value":"*const ()","parent":null,"children":[],"decl_id":null,"docs":" The type of an OpenGL function address.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1924,"byte_end":1928,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"Size","qualname":"::Size","value":"Size { width, height }","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61}],"decl_id":null,"docs":" Structure to store the window size.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1913,"byte_end":2012,"line_start":53,"line_end":58,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1913,"byte_end":2012,"line_start":53,"line_end":58,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":59},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1958,"byte_end":1963,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"width","qualname":"::Size::width","value":"u32","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" The width.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":61},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1998,"byte_end":2004,"line_start":57,"line_end":57,"column_start":9,"column_end":15},"name":"height","qualname":"::Size::height","value":"u32","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" The height.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3094,"byte_end":3102,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"Position","qualname":"::Position","value":"Position { x, y }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65}],"decl_id":null,"docs":" Structure to store the window position.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3083,"byte_end":3190,"line_start":103,"line_end":108,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3083,"byte_end":3190,"line_start":103,"line_end":108,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":63},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3139,"byte_end":3140,"line_start":105,"line_end":105,"column_start":9,"column_end":10},"name":"x","qualname":"::Position::x","value":"i32","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" The x coordinate.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":65},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3181,"byte_end":3182,"line_start":107,"line_end":107,"column_start":9,"column_end":10},"name":"y","qualname":"::Position::y","value":"i32","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" The y coordinate.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4144,"byte_end":4167,"line_start":150,"line_end":150,"column_start":11,"column_end":34},"name":"BuildFromWindowSettings","qualname":"::BuildFromWindowSettings","value":"BuildFromWindowSettings: Sized","parent":null,"children":[{"krate":0,"index":126}],"decl_id":null,"docs":" Constructs a window from a [`WindowSettings`](./struct.WindowSettings.html)\n object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4416,"byte_end":4442,"line_start":157,"line_end":157,"column_start":8,"column_end":34},"name":"build_from_window_settings","qualname":"::BuildFromWindowSettings::build_from_window_settings","value":"fn (settings: &WindowSettings) -> Result<Self, String>","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Builds the window from a `WindowSettings` object.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4805,"byte_end":4811,"line_start":166,"line_end":166,"column_start":11,"column_end":17},"name":"Window","qualname":"::Window","value":"Window","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144}],"decl_id":null,"docs":" Trait representing the minimum requirements for defining a window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4869,"byte_end":4885,"line_start":168,"line_end":168,"column_start":8,"column_end":24},"name":"set_should_close","qualname":"::Window::set_should_close","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Tells the window to close or stay open.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4968,"byte_end":4980,"line_start":171,"line_end":171,"column_start":8,"column_end":20},"name":"should_close","qualname":"::Window::should_close","value":"fn (&self) -> bool","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Returns true if the window should close.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5042,"byte_end":5046,"line_start":174,"line_end":174,"column_start":8,"column_end":12},"name":"size","qualname":"::Window::size","value":"fn (&self) -> Size","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Gets the size of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5306,"byte_end":5318,"line_start":181,"line_end":181,"column_start":8,"column_end":20},"name":"swap_buffers","qualname":"::Window::swap_buffers","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Swaps render buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5417,"byte_end":5427,"line_start":184,"line_end":184,"column_start":8,"column_end":18},"name":"wait_event","qualname":"::Window::wait_event","value":"fn (&mut self) -> Input","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Wait indefinitely for an input event to be available from the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5656,"byte_end":5674,"line_start":190,"line_end":190,"column_start":8,"column_end":26},"name":"wait_event_timeout","qualname":"::Window::wait_event_timeout","value":"fn (&mut self, timeout: Duration) -> Option<Input>","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Wait for an input event to be available from the window or for the\n specified timeout to be reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5831,"byte_end":5841,"line_start":195,"line_end":195,"column_start":8,"column_end":18},"name":"poll_event","qualname":"::Window::poll_event","value":"fn (&mut self) -> Option<Input>","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Polls an input event from the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6174,"byte_end":6183,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"draw_size","qualname":"::Window::draw_size","value":"fn (&self) -> Size","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Gets the draw size of the window.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6512,"byte_end":6526,"line_start":213,"line_end":213,"column_start":11,"column_end":25},"name":"AdvancedWindow","qualname":"::AdvancedWindow","value":"AdvancedWindow: Window + Sized","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174}],"decl_id":null,"docs":" Trait representing a window with the most features that are still generic.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6600,"byte_end":6609,"line_start":215,"line_end":215,"column_start":8,"column_end":17},"name":"get_title","qualname":"::AdvancedWindow::get_title","value":"fn (&self) -> String","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Gets a copy of the title of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6674,"byte_end":6683,"line_start":218,"line_end":218,"column_start":8,"column_end":17},"name":"set_title","qualname":"::AdvancedWindow::set_title","value":"fn (&mut self, value: String) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets the title of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6912,"byte_end":6917,"line_start":225,"line_end":225,"column_start":8,"column_end":13},"name":"title","qualname":"::AdvancedWindow::title","value":"fn (mut self, value: String) -> Self","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets title on window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7100,"byte_end":7115,"line_start":233,"line_end":233,"column_start":8,"column_end":23},"name":"get_exit_on_esc","qualname":"::AdvancedWindow::get_exit_on_esc","value":"fn (&self) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Gets whether to exit when pressing esc.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7229,"byte_end":7244,"line_start":238,"line_end":238,"column_start":8,"column_end":23},"name":"set_exit_on_esc","qualname":"::AdvancedWindow::set_exit_on_esc","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets whether to exit when pressing esc.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7553,"byte_end":7564,"line_start":247,"line_end":247,"column_start":8,"column_end":19},"name":"exit_on_esc","qualname":"::AdvancedWindow::exit_on_esc","value":"fn (mut self, value: bool) -> Self","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets whether to exit when pressing the Esc button.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7831,"byte_end":7849,"line_start":256,"line_end":256,"column_start":8,"column_end":26},"name":"set_capture_cursor","qualname":"::AdvancedWindow::set_capture_cursor","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets whether to capture/grab the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8113,"byte_end":8127,"line_start":263,"line_end":263,"column_start":8,"column_end":22},"name":"capture_cursor","qualname":"::AdvancedWindow::capture_cursor","value":"fn (mut self, value: bool) -> Self","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets whether to capture/grab the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8333,"byte_end":8337,"line_start":271,"line_end":271,"column_start":8,"column_end":12},"name":"show","qualname":"::AdvancedWindow::show","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Shows the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8463,"byte_end":8467,"line_start":276,"line_end":276,"column_start":8,"column_end":12},"name":"hide","qualname":"::AdvancedWindow::hide","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Hides the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8595,"byte_end":8607,"line_start":281,"line_end":281,"column_start":8,"column_end":20},"name":"get_position","qualname":"::AdvancedWindow::get_position","value":"fn (&self) -> Option<Position>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Gets the position of window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8751,"byte_end":8763,"line_start":286,"line_end":286,"column_start":8,"column_end":20},"name":"set_position","qualname":"::AdvancedWindow::set_position","value":"fn <P> (&mut self, val: P) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets the position of window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8907,"byte_end":8915,"line_start":291,"line_end":291,"column_start":8,"column_end":16},"name":"set_size","qualname":"::AdvancedWindow::set_size","value":"fn <S> (&mut self, val: S) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets the window size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9235,"byte_end":9243,"line_start":300,"line_end":300,"column_start":8,"column_end":16},"name":"position","qualname":"::AdvancedWindow::position","value":"fn <P> (mut self, val: P) -> Self","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Sets the position of window.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9976,"byte_end":9988,"line_start":319,"line_end":319,"column_start":11,"column_end":23},"name":"OpenGLWindow","qualname":"::OpenGLWindow","value":"OpenGLWindow: Window","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182}],"decl_id":null,"docs":" Trait for OpenGL specific operations on a window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10156,"byte_end":10172,"line_start":323,"line_end":323,"column_start":8,"column_end":24},"name":"get_proc_address","qualname":"::OpenGLWindow::get_proc_address","value":"fn (&mut self, proc_name: &str) -> ProcAddress","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Returns the address of the specified OpenGL function if it exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10301,"byte_end":10311,"line_start":326,"line_end":326,"column_start":8,"column_end":18},"name":"is_current","qualname":"::OpenGLWindow::is_current","value":"fn (&self) -> bool","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Returns true if this window's gl context is the current gl context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10397,"byte_end":10409,"line_start":329,"line_end":329,"column_start":8,"column_end":20},"name":"make_current","qualname":"::OpenGLWindow::make_current","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Make the window's gl context the current gl context.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10772,"byte_end":10786,"line_start":339,"line_end":339,"column_start":12,"column_end":26},"name":"WindowSettings","qualname":"::WindowSettings","value":"WindowSettings {  }","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87}],"decl_id":null,"docs":" Settings structure for window behavior.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11305,"byte_end":11308,"line_start":364,"line_end":364,"column_start":12,"column_end":15},"name":"new","qualname":"<WindowSettings>::new","value":"fn <T, S> (title: T, size: S) -> WindowSettings","parent":null,"children":[],"decl_id":null,"docs":" Creates window settings with defaults.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12229,"byte_end":12234,"line_start":391,"line_end":391,"column_start":12,"column_end":17},"name":"build","qualname":"<WindowSettings>::build","value":"fn <W> (&self) -> Result<W, String>","parent":null,"children":[],"decl_id":null,"docs":" Builds window from the given settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12418,"byte_end":12427,"line_start":396,"line_end":396,"column_start":12,"column_end":21},"name":"get_title","qualname":"<WindowSettings>::get_title","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Gets the title of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12533,"byte_end":12542,"line_start":401,"line_end":401,"column_start":12,"column_end":21},"name":"set_title","qualname":"<WindowSettings>::set_title","value":"fn (&mut self, value: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the title of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12819,"byte_end":12824,"line_start":410,"line_end":410,"column_start":12,"column_end":17},"name":"title","qualname":"<WindowSettings>::title","value":"fn (mut self, value: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the title of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12962,"byte_end":12970,"line_start":416,"line_end":416,"column_start":12,"column_end":20},"name":"get_size","qualname":"<WindowSettings>::get_size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Gets the size of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13064,"byte_end":13072,"line_start":421,"line_end":421,"column_start":12,"column_end":20},"name":"set_size","qualname":"<WindowSettings>::set_size","value":"fn (&mut self, value: Size) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13343,"byte_end":13347,"line_start":430,"line_end":430,"column_start":12,"column_end":16},"name":"size","qualname":"<WindowSettings>::size","value":"fn (mut self, value: Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13497,"byte_end":13511,"line_start":436,"line_end":436,"column_start":12,"column_end":26},"name":"get_fullscreen","qualname":"<WindowSettings>::get_fullscreen","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows will be fullscreen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13626,"byte_end":13640,"line_start":441,"line_end":441,"column_start":12,"column_end":26},"name":"set_fullscreen","qualname":"<WindowSettings>::set_fullscreen","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows will be fullscreen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13944,"byte_end":13954,"line_start":450,"line_end":450,"column_start":12,"column_end":22},"name":"fullscreen","qualname":"<WindowSettings>::fullscreen","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows will be fullscreen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14131,"byte_end":14146,"line_start":456,"line_end":456,"column_start":12,"column_end":27},"name":"get_exit_on_esc","qualname":"<WindowSettings>::get_exit_on_esc","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should exit when the Esc key is pressed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14283,"byte_end":14298,"line_start":461,"line_end":461,"column_start":12,"column_end":27},"name":"set_exit_on_esc","qualname":"<WindowSettings>::set_exit_on_esc","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should exit when the Esc key is pressed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14626,"byte_end":14637,"line_start":470,"line_end":470,"column_start":12,"column_end":23},"name":"exit_on_esc","qualname":"<WindowSettings>::exit_on_esc","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should exit when the Esc key is pressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14906,"byte_end":14917,"line_start":479,"line_end":479,"column_start":12,"column_end":23},"name":"get_samples","qualname":"<WindowSettings>::get_samples","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15139,"byte_end":15150,"line_start":487,"line_end":487,"column_start":12,"column_end":23},"name":"set_samples","qualname":"<WindowSettings>::set_samples","value":"fn (&mut self, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15554,"byte_end":15561,"line_start":499,"line_end":499,"column_start":12,"column_end":19},"name":"samples","qualname":"<WindowSettings>::samples","value":"fn (mut self, value: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15817,"byte_end":15826,"line_start":508,"line_end":508,"column_start":12,"column_end":21},"name":"get_vsync","qualname":"<WindowSettings>::get_vsync","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16041,"byte_end":16050,"line_start":516,"line_end":516,"column_start":12,"column_end":21},"name":"set_vsync","qualname":"<WindowSettings>::set_vsync","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16444,"byte_end":16449,"line_start":528,"line_end":528,"column_start":12,"column_end":17},"name":"vsync","qualname":"<WindowSettings>::vsync","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16941,"byte_end":16957,"line_start":541,"line_end":541,"column_start":12,"column_end":28},"name":"get_maybe_opengl","qualname":"<WindowSettings>::get_maybe_opengl","value":"fn (&self) -> Option<OpenGL>","parent":null,"children":[],"decl_id":null,"docs":" Gets the OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17407,"byte_end":17423,"line_start":553,"line_end":553,"column_start":12,"column_end":28},"name":"set_maybe_opengl","qualname":"<WindowSettings>::set_maybe_opengl","value":"fn (&mut self, value: Option<OpenGL>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18068,"byte_end":18080,"line_start":569,"line_end":569,"column_start":12,"column_end":24},"name":"maybe_opengl","qualname":"<WindowSettings>::maybe_opengl","value":"fn (mut self, value: Option<OpenGL>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18495,"byte_end":18505,"line_start":581,"line_end":581,"column_start":12,"column_end":22},"name":"set_opengl","qualname":"<WindowSettings>::set_opengl","value":"fn (&mut self, value: OpenGL) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19048,"byte_end":19054,"line_start":596,"line_end":596,"column_start":12,"column_end":18},"name":"opengl","qualname":"<WindowSettings>::opengl","value":"fn (mut self, value: OpenGL) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19677,"byte_end":19685,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"get_srgb","qualname":"<WindowSettings>::get_srgb","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19930,"byte_end":19938,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"set_srgb","qualname":"<WindowSettings>::set_srgb","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20360,"byte_end":20364,"line_start":631,"line_end":631,"column_start":12,"column_end":16},"name":"srgb","qualname":"<WindowSettings>::srgb","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20515,"byte_end":20528,"line_start":637,"line_end":637,"column_start":12,"column_end":25},"name":"get_resizable","qualname":"<WindowSettings>::get_resizable","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should be resizable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20643,"byte_end":20656,"line_start":642,"line_end":642,"column_start":12,"column_end":25},"name":"set_resizable","qualname":"<WindowSettings>::set_resizable","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be resizable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20958,"byte_end":20967,"line_start":651,"line_end":651,"column_start":12,"column_end":21},"name":"resizable","qualname":"<WindowSettings>::resizable","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be resizable.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21349,"byte_end":21362,"line_start":663,"line_end":663,"column_start":12,"column_end":25},"name":"get_decorated","qualname":"<WindowSettings>::get_decorated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21703,"byte_end":21716,"line_start":674,"line_end":674,"column_start":12,"column_end":25},"name":"set_decorated","qualname":"<WindowSettings>::set_decorated","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22244,"byte_end":22253,"line_start":689,"line_end":689,"column_start":12,"column_end":21},"name":"decorated","qualname":"<WindowSettings>::decorated","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22423,"byte_end":22438,"line_start":695,"line_end":695,"column_start":12,"column_end":27},"name":"get_controllers","qualname":"<WindowSettings>::get_controllers","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should listen to controller input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22569,"byte_end":22584,"line_start":700,"line_end":700,"column_start":12,"column_end":27},"name":"set_controllers","qualname":"<WindowSettings>::set_controllers","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should listen to controller input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22906,"byte_end":22917,"line_start":709,"line_end":709,"column_start":12,"column_end":23},"name":"controllers","qualname":"<WindowSettings>::controllers","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether build windows should listen to controller input.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23788,"byte_end":23796,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24098,"byte_end":24106,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24728,"byte_end":24736,"line_start":71,"line_end":71,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24976,"byte_end":24984,"line_start":80,"line_end":80,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2038,"byte_end":2042,"line_start":60,"line_end":60,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2225,"byte_end":2229,"line_start":70,"line_end":70,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3216,"byte_end":3224,"line_start":110,"line_end":110,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3406,"byte_end":3414,"line_start":120,"line_end":120,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11020,"byte_end":11034,"line_start":353,"line_end":353,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23788,"byte_end":23796,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24098,"byte_end":24106,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":40},"to":{"krate":0,"index":128}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24728,"byte_end":24736,"line_start":71,"line_end":71,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":40},"to":{"krate":0,"index":124}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24976,"byte_end":24984,"line_start":80,"line_end":80,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":40},"to":{"krate":0,"index":146}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2038,"byte_end":2042,"line_start":60,"line_end":60,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":260},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2225,"byte_end":2229,"line_start":70,"line_end":70,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":260},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3216,"byte_end":3224,"line_start":110,"line_end":110,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":282},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3406,"byte_end":3414,"line_start":120,"line_end":120,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":282},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4169,"byte_end":4174,"line_start":150,"line_end":150,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1706},"to":{"krate":0,"index":124}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6528,"byte_end":6534,"line_start":213,"line_end":213,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":128},"to":{"krate":0,"index":146}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6537,"byte_end":6542,"line_start":213,"line_end":213,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1706},"to":{"krate":0,"index":146}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9990,"byte_end":9996,"line_start":319,"line_end":319,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":128},"to":{"krate":0,"index":176}},{"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11020,"byte_end":11034,"line_start":353,"line_end":353,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}}]}