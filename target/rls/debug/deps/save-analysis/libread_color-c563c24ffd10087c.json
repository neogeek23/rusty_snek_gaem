{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"read_color","disambiguator":[16955915029696496814,2177865065517916294]},"crate_root":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src","external_crates":[{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9585301629330894657,2988139860475965212]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6357402705278437736,15396228000174385779]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15656677349667522462,981408973859384302]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[10867707675671826130,15962273691783661441]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[12150198854270067491,9945263365427243254]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8689393118962671966,13316658367717829988]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11087397179380250019,16173628695450963038]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[15668163579258084147,15586271759104334837]}},{"file_name":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[5446911583689922829,16172663846372972649]}}],"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":2450,"line_start":1,"line_end":100,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":2450,"line_start":1,"line_end":100,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/brad/.cargo/registry/src/github.com-1ecc6299db9ec823/read_color-1.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18}],"decl_id":null,"docs":" A simple library for reading hex colors.\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":8},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":141,"byte_end":152,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"char_to_hex","qualname":"::char_to_hex","value":"fn (ch: char) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Converts a character into a u8 value.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":10},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":630,"byte_end":633,"line_start":31,"line_end":31,"column_start":8,"column_end":11},"name":"hex","qualname":"::hex","value":"fn (chars: &mut Chars) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Reads a hex value from an iterator of characters.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":846,"byte_end":854,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"hex_pair","qualname":"::hex_pair","value":"fn (chars: &mut Chars) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Reads a pair of hex values, joining them in value range 0-255.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1165,"byte_end":1168,"line_start":52,"line_end":52,"column_start":8,"column_end":11},"name":"rgb","qualname":"::rgb","value":"fn (chars: &mut Chars) -> Option<[u8; 3]>","parent":null,"children":[],"decl_id":null,"docs":" Reads RGB colors from iterator of characters.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":16},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1599,"byte_end":1603,"line_start":69,"line_end":69,"column_start":8,"column_end":12},"name":"rgba","qualname":"::rgba","value":"fn (chars: &mut Chars) -> Option<[u8; 4]>","parent":null,"children":[],"decl_id":null,"docs":" Reads RGBA colors from iterator of characters.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,98,114,97,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,97,100,95,99,111,108,111,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2154,"byte_end":2165,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"rgb_maybe_a","qualname":"::rgb_maybe_a","value":"fn (chars: &mut Chars) -> Option<([u8; 3], Option<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Reads RGB with optional alpha from iterator of characters.\n","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}